{"version":3,"sources":["Ship.js","Gameboard.js","Player.js","components/StartingHeader/StartingHeader.component.jsx","components/PlacementTile/PlacementTile.component.jsx","components/PlacementTiles/PlacementTiles.component.jsx","components/PlacementBoard/PlacementBoard.component.jsx","components/StartingScreen/StartingScreen.component.jsx","components/EndHeader/EndHeader.component.jsx","components/Tile/Tile.component.jsx","components/Tiles/Tiles.component.jsx","components/GameboardGrid/GameboardGrid.component.jsx","components/Gameboards/Gameboards.component.jsx","components/GameScreen/GameScreen.component.jsx","App.js","index.js"],"names":["Ship","shipLength","name","length","hitTiles","hit","tile","push","getHitTiles","isSunk","Gameboard","id","gameboardId","shipPlacements","missedShots","placeShip","shipObj","coords","ship","coordinates","receiveAttack","coord","placedShip","includes","getMissedShots","reportAllSunk","getId","Player","turn","isTurn","playerId","getPlayerId","getTurn","setTurn","newTurn","playerHasAttacked","attack","enemyPlayer","enemyGameboard","generateRandomLetter","alphabetRange","Math","floor","random","getRandomCoordinate","randomCoordinate","StartingHeader","currentShip","className","toUpperCase","PlacementTile","refWidth","refHeight","coordinate","handleHoveredTile","highlightedTiles","handleShipCoordinates","takenCoords","useState","hovered","setHovered","highlighted","setHighlighted","handleHovered","useEffect","style","width","height","data-coordinate","onMouseEnter","onMouseLeave","onClick","PlacementTiles","split","tilesArr","x","coordinateLetter","y","map","PlacementBoard","handleStartGame","handleCurrentShip","playerGameboard","computerGameboard","boardWidth","setBoardWidth","boardHeight","setBoardHeight","carrierCoords","setCarrierCoords","battleShipCoords","setBattleShipCoords","cruiserCoords","setCruiserCoords","submarineCoords","setSubmarineCoords","destroyerCoords","setDestroyerCoords","setTakenCoords","shipsPlaced","setShipsPlaced","hoveredTile","setHoveredTile","setHighlightedTiles","areCoordinatesAvailable","correspondingCoords","hasNoMatches","forEach","correspondingCoord","handleHighlightedTiles","correspondingTiles","splitCoordinate","match","coordLetter","coordNumber","Number","lengthOfShip","coordArray","i","getCorrespondingTiles","handleSetShipsPlaced","newArray","handleTakenCoordiantes","array","handleBattleShipCoords","handleCruiserCoords","handleSubmarineCoords","handleDestroyerCoords","StartingScreen","setCurrentShip","shipsSet","EndHeader","winner","handleResetGame","Tile","handleReceiveAttack","handleSetCurrentTurn","currentTurn","player","gameOver","isShot","setIsShot","hasShip","setHasShip","shipSunk","setShipSunk","handleIsShot","borderRadius","Tiles","GameboardGrid","gameboard","handleComputerTurn","computerPlayer","humanPlayer","randomCoord","setTimeout","Gameboards","GameScreen","App","setWidth","setPlayer","setComputerPlayer","setPlayerGameboard","setComputerGameboard","setCurrentTurn","startGame","setStartGame","setGameOver","setWinner","handleDimensions","window","innerWidth","handleResize","addEventListener","placeShipsOnBoard","board","carrier","battleship","cruiser","submarine","destroyer","ship1","ship2","ship3","ship4","ship5","currentPlayer","playerBoard","computerBoard","battleshipCoords","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc5b120c.chunk.js","sourcesContent":["const Ship = (shipLength, name) => {\r\n    const length = shipLength;\r\n    const hitTiles = [];\r\n    const getHitTiles = () => hitTiles;\r\n    const hit = (tile) => {\r\n        hitTiles.push(tile);\r\n    };\r\n    const isSunk = () => {\r\n        if (hitTiles.length === length) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return { hit, getHitTiles, hitTiles, isSunk, length, name }\r\n}\r\n\r\nexport default Ship;","const Gameboard = (id) => {\r\n    const gameboardId = id;\r\n    const getId = () => gameboardId;\r\n    const shipPlacements = {};\r\n    const missedShots = [];\r\n    const getMissedShots = () => missedShots;\r\n    const placeShip = (shipObj, coords) => {\r\n        shipPlacements[shipObj.name] = {\r\n            ship: shipObj,\r\n            coordinates: coords\r\n        }\r\n    }\r\n    const receiveAttack = (coord) => {\r\n        for (let placedShip in shipPlacements) {\r\n            if (shipPlacements[placedShip].coordinates.includes(coord)) {\r\n                shipPlacements[placedShip].ship.hit(coord);\r\n                return\r\n            }\r\n        }\r\n        missedShots.push(coord)\r\n    }\r\n\r\n    const reportAllSunk = () => {\r\n        for (let placedShip in shipPlacements) {\r\n            if (!shipPlacements[placedShip].ship.isSunk()) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    \r\n    return { shipPlacements, placeShip, receiveAttack, getMissedShots, reportAllSunk, getId }\r\n}\r\n\r\nexport default Gameboard;","const Player = (turn, id) => {\r\n    let isTurn = turn;\r\n    let playerId = id;\r\n    const getPlayerId = () => playerId;\r\n    const getTurn = () => isTurn;\r\n    const setTurn = (newTurn) => {\r\n       isTurn = newTurn\r\n    }\r\n    const playerHasAttacked = [];\r\n\r\n    const attack = (enemyPlayer, enemyGameboard, coord) => {\r\n        if (!getTurn()) {\r\n            return null;\r\n        } else if (playerHasAttacked.includes(coord)) {\r\n            return null;\r\n        } else {\r\n            setTurn(false);\r\n            playerHasAttacked.push(coord);\r\n            enemyGameboard.receiveAttack(coord);\r\n            enemyPlayer.setTurn(true);\r\n            return true\r\n        }    \r\n    }\r\n\r\n    const generateRandomLetter = () => {\r\n        const alphabetRange = \"ABCDEFGHIJ\";\r\n        return alphabetRange[Math.floor(Math.random() * alphabetRange.length)];\r\n    }\r\n\r\n    const generateRandomNumber = () => {\r\n        // Generates a random number between 0 and 9, then adds 1 to the solution.\r\n        return Math.floor(Math.random() * 10) + 1\r\n    }\r\n\r\n    const getRandomCoordinate = () => {\r\n        const randomLetter = generateRandomLetter();\r\n        const randomNumber = generateRandomNumber();\r\n        const randomCoordinate = randomLetter + randomNumber;\r\n        if (playerHasAttacked.includes(randomCoordinate)) {\r\n          return getRandomCoordinate()\r\n        } else {\r\n          return randomCoordinate;  \r\n        } \r\n    }\r\n    \r\n    if (playerId === \"computer\") {\r\n        return { getTurn, setTurn, getPlayerId, attack, generateRandomLetter, getRandomCoordinate, playerHasAttacked }\r\n    } else {\r\n        return { getTurn, setTurn, getPlayerId, attack, playerHasAttacked }\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport './StartingHeader.css';\r\n\r\nconst StartingHeader = ({ currentShip }) => (\r\n    <div className='starting-header'>PLACE YOUR {currentShip.toUpperCase()}</div>\r\n)\r\n\r\nexport default StartingHeader;","import { React, useEffect, useState } from 'react';\r\nimport './PlacementTile.css';\r\n\r\nconst PlacementTile = ({ refWidth, refHeight, coordinate, handleHoveredTile, highlightedTiles, handleShipCoordinates, takenCoords }) => {\r\n    const [hovered, setHovered] = useState(false);\r\n    const [highlighted, setHighlighted] = useState(false);\r\n\r\n    const handleHovered = () => {\r\n        if (!hovered) {\r\n            setHovered(true)\r\n        } else {\r\n            setHovered(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (hovered) {\r\n            handleHoveredTile(coordinate)\r\n        }\r\n    }, [hovered])\r\n\r\n    useEffect(() => {\r\n        if (highlightedTiles) {\r\n            if (highlightedTiles.includes(coordinate)) {\r\n                setHighlighted(true)\r\n            } else {\r\n                setHighlighted(false)\r\n            }\r\n        }\r\n        else {\r\n            setHighlighted(false)\r\n        }\r\n    }, [highlighted, highlightedTiles])\r\n\r\n    return (\r\n        <div \r\n        style={{width: (1/10) * refWidth, height: (1/10) * refHeight}}\r\n        className={`black-border border-box tile ${highlighted ? 'sky-blue' : null} ${takenCoords.includes(coordinate) ? 'green' : null}`}\r\n        data-coordinate={coordinate}\r\n        onMouseEnter={handleHovered}\r\n        onMouseLeave={handleHovered}\r\n        onClick={handleShipCoordinates}\r\n        >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlacementTile","import PlacementTile from '../PlacementTile/PlacementTile.component';\r\nimport './PlacementTiles.css';\r\n\r\nconst PlacementTiles = ({ refWidth, refHeight, handleHoveredTile, highlightedTiles, handleShipCoordinates, takenCoords }) => {\r\n    const alphabetRange = \"ABCDEFGHIJ\".split('');\r\n    const tilesArr = [];\r\n    for (let x = 0; x < 10; x++) {\r\n        let coordinateLetter = alphabetRange[x];\r\n        for (let y = 1; y <= 10; y++) {\r\n            let coordinate = coordinateLetter + y;\r\n            tilesArr.push(\r\n                <PlacementTile \r\n                refWidth={refWidth} \r\n                refHeight={refHeight} \r\n                key={coordinate} \r\n                coordinate={coordinate}\r\n                handleHoveredTile={handleHoveredTile}\r\n                highlightedTiles={highlightedTiles}\r\n                handleShipCoordinates={handleShipCoordinates}\r\n                takenCoords={takenCoords}\r\n                />\r\n            );\r\n        }   \r\n    }\r\n    return (\r\n        <div className=\"flex-row\">\r\n            {tilesArr.map(PlacementTile => PlacementTile)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlacementTiles","import './PlacementBoard.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport PlacementTiles from '../PlacementTiles/PlacementTiles.component';\r\nimport Ship from \"../../Ship.js\";\r\n\r\nconst PlacementBoard = ({ width, handleStartGame, handleCurrentShip, playerGameboard, computerGameboard }) => {\r\n    const [boardWidth, setBoardWidth] = useState(null);\r\n    const [boardHeight, setBoardHeight] = useState(null);\r\n    const [carrierCoords, setCarrierCoords] = useState([]);\r\n    const [battleShipCoords, setBattleShipCoords] = useState([]);\r\n    const [cruiserCoords, setCruiserCoords] = useState([]);\r\n    const [submarineCoords, setSubmarineCoords] = useState([]);\r\n    const [destroyerCoords, setDestroyerCoords] = useState([]);\r\n    const [takenCoords, setTakenCoords] = useState([]);\r\n    const [shipsPlaced, setShipsPlaced] = useState(0);\r\n    const [hoveredTile, setHoveredTile] = useState(null);\r\n    const [highlightedTiles, setHighlightedTiles] = useState([]);\r\n\r\n    const handleBoardDimensions = () => {\r\n        setBoardWidth(width * (1/4));\r\n        setBoardHeight(boardWidth);\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleBoardDimensions();\r\n    })\r\n\r\n    const handleCarrierCoords = (array) => {\r\n        setCarrierCoords(array)\r\n    }\r\n\r\n    const handleBattleShipCoords = (array) => {\r\n        setBattleShipCoords(array)\r\n    }\r\n\r\n    const handleCruiserCoords = (array) => {\r\n        setCruiserCoords(array)\r\n    }\r\n    \r\n    const handleSubmarineCoords = (array) => {\r\n        setSubmarineCoords(array)\r\n    }\r\n\r\n    const handleDestroyerCoords = (array) => {\r\n        setDestroyerCoords(array)\r\n    };\r\n\r\n    const handleHoveredTile = (coord) => {\r\n        setHoveredTile(coord);\r\n    }\r\n\r\n    const getCorrespondingTiles = (hoveredTile) => {\r\n        const splitCoordinate = hoveredTile.match(/[a-z]+|[^a-z]+/gi); // Split Letter and Number\r\n        const coordLetter = splitCoordinate[0];\r\n        const coordNumber = Number(splitCoordinate[1]);\r\n        const amountOfShipsPlaced = shipsPlaced;\r\n        let lengthOfShip = 5 - amountOfShipsPlaced;\r\n        if (amountOfShipsPlaced >= 3) { // to account for submarine and destroyer lengths\r\n            lengthOfShip = lengthOfShip + 1;\r\n        } \r\n        if (((coordNumber - 1) + lengthOfShip) <= 10 ) {\r\n            let coordArray = [];\r\n            for (let i = 0; i < lengthOfShip; i++) {\r\n                coordArray.push(coordLetter + (i + coordNumber));\r\n            }\r\n            return coordArray\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    const areCoordinatesAvailable = (correspondingCoords, takenCoords) => {\r\n        if (correspondingCoords && takenCoords) {\r\n            let hasNoMatches = true;\r\n            correspondingCoords.forEach(correspondingCoord => {\r\n                if (takenCoords.includes(correspondingCoord)) {\r\n                    hasNoMatches = false;\r\n                }\r\n            })\r\n            return hasNoMatches\r\n        }\r\n    }\r\n\r\n    const handleHighlightedTiles = (hoveredTile) => {\r\n        const correspondingTiles = getCorrespondingTiles(hoveredTile);\r\n        if (takenCoords && correspondingTiles) {\r\n            const coordsAvailable = areCoordinatesAvailable(correspondingTiles, takenCoords);\r\n            if (coordsAvailable) {\r\n                setHighlightedTiles(correspondingTiles);\r\n                return\r\n            }\r\n        }  \r\n    }\r\n\r\n    useEffect(() => {\r\n        if (hoveredTile) {\r\n            handleHighlightedTiles(hoveredTile);\r\n        }\r\n    }, [hoveredTile])\r\n\r\n    const placeShipsOnBoard = (board) => {\r\n        const ship1 = Ship(5, 'carrier');\r\n        const ship2 = Ship(4, 'battleship');\r\n        const ship3 = Ship(3, 'cruiser');\r\n        const ship4 = Ship(3, 'submarine');\r\n        const ship5 = Ship(2, 'destroyer');\r\n        board.placeShip(ship1, [\"A1\", \"A2\", \"A3\", \"A4\", \"A5\"]);\r\n        board.placeShip(ship2, [\"B1\", \"B2\", \"B3\", \"B4\"]);\r\n        board.placeShip(ship3, [\"D4\", \"E4\", \"F4\"]);\r\n        board.placeShip(ship4, [\"G3\", \"G4\", \"G5\"]);\r\n        board.placeShip(ship5, [\"I5\", \"I6\"]);\r\n    }\r\n\r\n    const handleSetShipsPlaced = () => {\r\n        switch (shipsPlaced) {\r\n            case 0:\r\n                setShipsPlaced(1);\r\n                break;\r\n            case 1:\r\n                setShipsPlaced(2);\r\n                break;\r\n            case 2:\r\n                setShipsPlaced(3);\r\n                break;\r\n            case 3:\r\n                setShipsPlaced(4);\r\n                break;\r\n            case 4:\r\n                setShipsPlaced(5);\r\n                break;\r\n        }\r\n    }\r\n\r\n    const handleShipCoordinates = () => {\r\n        const isAvailable = areCoordinatesAvailable(highlightedTiles, takenCoords);\r\n        if (isAvailable) {\r\n            switch (shipsPlaced) {\r\n                case 0: \r\n                    handleCarrierCoords(highlightedTiles);\r\n                    handleSetShipsPlaced();\r\n                    break;\r\n                case 1: \r\n                    handleBattleShipCoords(highlightedTiles);\r\n                    handleSetShipsPlaced();\r\n                    break;\r\n                case 2: \r\n                    handleCruiserCoords(highlightedTiles);\r\n                    handleSetShipsPlaced();\r\n                    break;\r\n                case 3: \r\n                    handleSubmarineCoords(highlightedTiles);\r\n                    handleSetShipsPlaced();\r\n                    break;\r\n                case 4: \r\n                    handleDestroyerCoords(highlightedTiles);\r\n                    handleSetShipsPlaced();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleTakenCoordiantes = () => {\r\n        let newArray = [];\r\n        carrierCoords.forEach(coord => newArray.push(coord));\r\n        battleShipCoords.forEach(coord => newArray.push(coord));\r\n        cruiserCoords.forEach(coord => newArray.push(coord));\r\n        submarineCoords.forEach(coord => newArray.push(coord));\r\n        destroyerCoords.forEach(coord => newArray.push(coord));\r\n        setTakenCoords(newArray);\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleTakenCoordiantes();\r\n    }, [carrierCoords, battleShipCoords, cruiserCoords, submarineCoords, destroyerCoords])\r\n\r\n    useEffect(() => {\r\n        if (shipsPlaced === 5) {\r\n            handleStartGame(playerGameboard, computerGameboard, carrierCoords, battleShipCoords, cruiserCoords, submarineCoords, destroyerCoords);\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        handleCurrentShip(shipsPlaced);\r\n    }, [shipsPlaced])\r\n\r\n    return (\r\n        <div style={{width: boardWidth, height: boardHeight}} className=\"black-border purple\">\r\n            <PlacementTiles \r\n            refWidth={boardWidth} \r\n            refHeight={boardHeight}\r\n            highlightedTiles={highlightedTiles}\r\n            handleHoveredTile={handleHoveredTile}\r\n            handleShipCoordinates={handleShipCoordinates}\r\n            takenCoords={takenCoords}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlacementBoard","import React, { useState } from 'react';\r\nimport StartingHeader from '../StartingHeader/StartingHeader.component';\r\nimport PlacementBoard from '../PlacementBoard/PlacementBoard.component';\r\nimport './StartingScreen.css';\r\n\r\nconst StartingScreen = ({ width, handleStartGame, playerGameboard, computerGameboard }) => {\r\n    const [currentShip, setCurrentShip] = useState('Carrier');\r\n\r\n    const handleCurrentShip = (shipsSet) => {\r\n        switch (shipsSet) {\r\n            case 0:\r\n                setCurrentShip('Carrier');\r\n                break;\r\n            case 1:\r\n                setCurrentShip('Battleship');\r\n                break;\r\n            case 2:\r\n                setCurrentShip('Cruiser');\r\n                break;\r\n            case 3:\r\n                setCurrentShip('Submarine');\r\n                break;\r\n            case 4:\r\n                setCurrentShip('Destroyer');\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"starting-screen\">\r\n            <StartingHeader currentShip={currentShip}/>\r\n            <PlacementBoard \r\n                width={width}\r\n                handleCurrentShip={handleCurrentShip} \r\n                handleStartGame={handleStartGame} \r\n                playerGameboard={playerGameboard} \r\n                computerGameboard={computerGameboard} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartingScreen;","import React from 'react';\r\nimport './EndHeader.css';\r\n\r\nconst EndHeader = ({ winner, handleResetGame }) => (\r\n    <div className=\"end-header\">\r\n        <div>{winner} Wins!</div>\r\n        <button onClick={handleResetGame}>Reset Game</button>\r\n    </div>\r\n)\r\n\r\nexport default EndHeader;","import { useEffect, useState } from 'react';\r\nimport './Tile.css';\r\n\r\nconst Tile = ({ refWidth, refHeight, coordinate, shipPlacements, handleReceiveAttack, currentTurn, handleSetCurrentTurn, player, enemyPlayer, gameOver }) => {\r\n    const [isShot, setIsShot] = useState(false);\r\n    const [hasShip, setHasShip] = useState(false);\r\n    const [shipSunk, setShipSunk] = useState(false);\r\n\r\n    const handleIsShot = () => {\r\n        setIsShot(true);\r\n    }\r\n\r\n    const handleSetHasShip = () => {\r\n        setHasShip(true);\r\n    }\r\n    \r\n    const handleOnClick = () => {\r\n        if (gameOver) {\r\n            return\r\n        }\r\n        if (enemyPlayer.getTurn()) {\r\n            handleIsShot();\r\n            handleReceiveAttack(coordinate);\r\n            handleSetCurrentTurn(player);\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        for (let ship in shipPlacements) {\r\n            if (shipPlacements[ship].coordinates.includes(coordinate)) {\r\n                handleSetHasShip()\r\n            }\r\n            if (enemyPlayer.playerHasAttacked.includes(coordinate)) {\r\n                handleIsShot()\r\n            }\r\n            if (shipPlacements[ship].coordinates.includes(coordinate) && shipPlacements[ship].ship.isSunk()) {\r\n                setShipSunk(true)\r\n            }\r\n        }\r\n    })\r\n    return (\r\n        <div \r\n        onClick={handleOnClick}\r\n        style={{width: (1/10) * refWidth, height: (1/10) * refHeight}}\r\n        className=\"black-border border-box tile\"\r\n        data-coordinate={coordinate}\r\n        >\r\n            {\r\n                (isShot) ?\r\n                <div \r\n                    style={{width: (1/20) * refWidth, height: (1/20) * refHeight, borderRadius: 50}}\r\n                    className={`${hasShip ? \"green\" : \"red\"}`}\r\n                >\r\n                </div> \r\n                :\r\n                null\r\n            } \r\n            {\r\n                (shipSunk) ? \r\n                <div className='sunk' style={{width: (1/10) * refWidth, height: 1}}></div>\r\n                :\r\n                null          \r\n            } \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tile","import Tile from '../Tile/Tile.component';\r\nimport './Tiles.css';\r\n\r\nconst Tiles = ({ refWidth, refHeight, shipPlacements, handleReceiveAttack, currentTurn, handleSetCurrentTurn, player, enemyPlayer, gameOver }) => {\r\n    const alphabetRange = \"ABCDEFGHIJ\".split('');\r\n    const tilesArr = [];\r\n    for (let x = 0; x < 10; x++) {\r\n        let coordinateLetter = alphabetRange[x];\r\n        for (let y = 1; y <= 10; y++) {\r\n            let coordinate = coordinateLetter + y;\r\n            tilesArr.push(\r\n                <Tile \r\n                refWidth={refWidth} \r\n                refHeight={refHeight} \r\n                key={coordinate} \r\n                coordinate={coordinate} \r\n                shipPlacements={shipPlacements} \r\n                handleReceiveAttack={handleReceiveAttack}\r\n                player={player}\r\n                enemyPlayer={enemyPlayer}\r\n                currentTurn={currentTurn}\r\n                handleSetCurrentTurn={handleSetCurrentTurn}\r\n                gameOver={gameOver}\r\n                />\r\n            );\r\n        }   \r\n    }\r\n    return (\r\n        <div className=\"flex-row\">\r\n            {tilesArr.map(Tile => Tile)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tiles","import './GameboardGrid.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Tiles from '../Tiles/Tiles.component'\r\n\r\nconst GameboardGrid = ({ width, player, enemyPlayer, gameboard, currentTurn, handleSetCurrentTurn, gameOver }) => {\r\n    const [boardWidth, setBoardWidth] = useState(null);\r\n    const [boardHeight, setBoardHeight] = useState(null);\r\n    const [coordinatesWithShips, setCoordinatesWithShips] = useState([]);\r\n\r\n    const shipPlacements = gameboard.shipPlacements;\r\n\r\n    const handleBoardDimensions = () => {\r\n        setBoardWidth(width * (1/4));\r\n        setBoardHeight(boardWidth);\r\n    }\r\n\r\n    const handleReceiveAttack = (coord) => {\r\n        enemyPlayer.attack(player, gameboard, coord)\r\n    }\r\n\r\n    const handleComputerAttack = (attackingPlayer, defendingPlayer, defendingBoard, coord) => {\r\n        enemyPlayer.attack(player, gameboard, coord)\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleBoardDimensions();\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (currentTurn === 'computer' && enemyPlayer.getPlayerId() === 'computer') {\r\n            const handleComputerTurn = () => {\r\n                const computerPlayer = enemyPlayer;\r\n                const humanPlayer = player;\r\n                const randomCoord = computerPlayer.getRandomCoordinate();\r\n                handleComputerAttack(computerPlayer, humanPlayer, gameboard, randomCoord);\r\n                handleSetCurrentTurn(humanPlayer);\r\n            }\r\n            setTimeout(() => {\r\n                handleComputerTurn()\r\n            }, 1000)   \r\n        }\r\n    }, [currentTurn])\r\n\r\n    return (\r\n        <div>\r\n            <div style={{width: boardWidth, height: boardHeight}} className=\"black-border purple\">\r\n                <Tiles \r\n                refWidth={boardWidth} \r\n                refHeight={boardHeight} \r\n                shipPlacements={shipPlacements} \r\n                handleReceiveAttack={handleReceiveAttack} \r\n                player={player} \r\n                enemyPlayer={enemyPlayer}\r\n                currentTurn={currentTurn}\r\n                handleSetCurrentTurn={handleSetCurrentTurn}\r\n                gameOver={gameOver}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameboardGrid","import GameboardGrid from '../GameboardGrid/GameboardGrid.component';\r\nimport './Gameboards.css';\r\n\r\nconst Gameboards = ({ width, player, computerPlayer, playerGameboard, computerGameboard, currentTurn, handleSetCurrentTurn, gameOver }) => (\r\n    <div className='gameboards'>\r\n        <GameboardGrid\r\n            width={width}\r\n            player={player}\r\n            enemyPlayer={computerPlayer}\r\n            gameboard={playerGameboard}\r\n            currentTurn={currentTurn}\r\n            handleSetCurrentTurn={handleSetCurrentTurn}\r\n            gameOver={gameOver}\r\n        />\r\n        <GameboardGrid \r\n            width={width}\r\n            player={computerPlayer}\r\n            enemyPlayer={player}\r\n            gameboard={computerGameboard}\r\n            currentTurn={currentTurn}\r\n            handleSetCurrentTurn={handleSetCurrentTurn}\r\n            gameOver={gameOver} \r\n        />\r\n    </div>\r\n)\r\n\r\nexport default Gameboards","import React from 'react';\r\nimport EndHeader from '../EndHeader/EndHeader.component';\r\nimport Gameboards from '../Gameboards/Gameboards.component';\r\nimport './GameScreen.css';\r\n\r\nconst GameScreen =\r\n     ({ width, player, computerPlayer, playerGameboard, computerGameboard, handleSetCurrentTurn, handleResetGame, winner, gameOver, currentTurn }) => (\r\n    <div className='gamescreen'>\r\n    {\r\n        (!gameOver) ?\r\n        <div className=\"gamescreen-header\">{currentTurn.toUpperCase()}'S TURN!</div>\r\n        :\r\n        <EndHeader winner={winner} handleResetGame={handleResetGame}/>\r\n    }\r\n        <Gameboards \r\n            width={width} \r\n            player={player} \r\n            computerPlayer={computerPlayer} \r\n            playerGameboard={playerGameboard} \r\n            computerGameboard={computerGameboard}\r\n            currentTurn={currentTurn}\r\n            handleSetCurrentTurn={handleSetCurrentTurn}\r\n            gameOver={gameOver}\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default GameScreen;","import { useEffect, useState } from 'react';\r\nimport Ship from \"./Ship.js\";\r\nimport Gameboard from \"./Gameboard.js\";\r\nimport Player from \"./Player.js\";\r\nimport StartingScreen from './components/StartingScreen/StartingScreen.component.jsx';\r\nimport GameScreen from './components/GameScreen/GameScreen.component.jsx';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  const [width, setWidth] = useState(null);\r\n  const [player, setPlayer] = useState(() => Player(true, 'player'));\r\n  const [computerPlayer, setComputerPlayer] = useState(() => Player(false, 'computer'));\r\n  const [playerGameboard, setPlayerGameboard] = useState(() => Gameboard('Player'));\r\n  const [computerGameboard, setComputerGameboard] = useState(() => Gameboard('Computer'));\r\n  const [currentTurn, setCurrentTurn] = useState('player');\r\n  const [startGame, setStartGame] = useState(false);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [winner, setWinner] = useState(null);\r\n\r\n  const handleDimensions = () => {\r\n    setWidth(window.innerWidth)\r\n  }\r\n\r\n  const handleResize = () => {\r\n    handleDimensions();\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleDimensions();\r\n    window.addEventListener('resize', handleResize);\r\n  })\r\n\r\n  const handleSetCurrentTurn = (currentPlayer) => {\r\n    if (currentPlayer.getTurn() === true) {\r\n      setCurrentTurn(currentPlayer.getPlayerId);\r\n    }\r\n  }\r\n\r\n  const placeShipsOnBoard = (board, carrier, battleship, cruiser, submarine, destroyer) => {\r\n    const ship1 = Ship(5, 'carrier');\r\n    const ship2 = Ship(4, 'battleship');\r\n    const ship3 = Ship(3, 'cruiser');\r\n    const ship4 = Ship(3, 'submarine');\r\n    const ship5 = Ship(2, 'destroyer');\r\n    board.placeShip(ship1, carrier);\r\n    board.placeShip(ship2, battleship);\r\n    board.placeShip(ship3, cruiser);\r\n    board.placeShip(ship4, submarine);\r\n    board.placeShip(ship5, destroyer);\r\n  }\r\n\r\n  const handleResetGame = () => {\r\n    setPlayer(() => Player(true, 'player'));\r\n    setComputerPlayer(() => Player(false, 'computer'));\r\n    setPlayerGameboard(() => Gameboard('Player'));\r\n    setComputerGameboard(() => Gameboard('Computer'));\r\n    setStartGame(false);\r\n    setGameOver(false);\r\n    setCurrentTurn('player')\r\n  }\r\n\r\n  const handleStartGame = (playerBoard, computerBoard, carrierCoords, battleshipCoords, cruiserCoords, submarineCoords, destroyerCoords) => {\r\n    placeShipsOnBoard(playerBoard, carrierCoords, battleshipCoords, cruiserCoords, submarineCoords, destroyerCoords);\r\n    placeShipsOnBoard(computerBoard, carrierCoords, battleshipCoords, cruiserCoords, submarineCoords, destroyerCoords);\r\n    setStartGame(true);\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    if (startGame) {\r\n      if (playerGameboard.reportAllSunk()) {\r\n        setGameOver(true);\r\n        setWinner('Computer');\r\n      } else if (computerGameboard.reportAllSunk()) {\r\n        setGameOver(true);\r\n        setWinner('Player');\r\n      }\r\n    }\r\n  }, [startGame, currentTurn, playerGameboard, computerGameboard])\r\n\r\n  return (\r\n    <div className=\"app-container full-width full-height gradient\">\r\n      {\r\n        (!startGame) ?\r\n        <StartingScreen width={width} handleStartGame={handleStartGame} playerGameboard={playerGameboard} computerGameboard={computerGameboard}/>\r\n        :\r\n        <GameScreen\r\n          width={width} \r\n          player={player} \r\n          computerPlayer={computerPlayer} \r\n          playerGameboard={playerGameboard} \r\n          computerGameboard={computerGameboard}\r\n          handleSetCurrentTurn={handleSetCurrentTurn}\r\n          handleResetGame={handleResetGame}\r\n          currentTurn={currentTurn}\r\n          gameOver={gameOver}\r\n          winner={winner}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}